// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram;
    static Array heap;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heap = 2048;

        let heap[0] = 0;
        let heap[1] = 16384 - 2048 - 2;

        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var Array block, currBlock;
        var int bestSize, currSize;

        let block = -1;
        let currBlock = heap;
        let bestSize = currBlock[1];
        let currSize = currBlock[1];
        while (currBlock > 0) {
            if (currSize > (size + 1)) {
                if (currSize < (bestSize + 1)) {
                    let block = currBlock;
                    let bestSize = currSize;
                }
            }
            let currBlock = currBlock[0];
            let currSize = currBlock[1];
        }

        if (block = -1) {
            do Sys.error(-1);
        }

        let block[1] = block[1] - size - 2;
        let block = block + block[1] + 1;
        let block[0] = -1;
        let block[1] = size;

        return block + 2;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var Array currBlock;

        let currBlock = heap;
        while (currBlock[0] > 0) {
            let currBlock = currBlock[0];
        }
        let currBlock[0] = o - 2;
        return;
    }    
}
